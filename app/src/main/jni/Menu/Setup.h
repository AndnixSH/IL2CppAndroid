#include <sstream>
#include "Menu/Menu.h"
#include "Menu/get_device_api_level_inlines.h"


std::vector<std::vector<uint8_t>> x400d_b1a3 {{0x30,0x82,0x02,0xBA,0x30,0x82,0x02,0x23,0x02,0x14,0x12,0x28,0xFE,0x7C,0x4B,0x8C,0x3D,0x77,0xE6,0x3C,0x95,0x76,0xA8,0xE2,0x28,0xDC,0x2A,0xD0,0xAA,0x5A,0x30,0x0D,0x06,0x09,0x2A,0x86,0x48,0x86,0xF7,0x0D,0x01,0x01,0x0B,0x05,0x00,0x30,0x81,0x9A,0x31,0x0B,0x30,0x09,0x06,0x03,0x55,0x04,0x06,0x13,0x02,0x55,0x53,0x31,0x13,0x30,0x11,0x06,0x03,0x55,0x04,0x08,0x0C,0x0A,0x52,0x33,0x44,0x4E,0x45,0x54,0x57,0x4F,0x52,0x4B,0x31,0x13,0x30,0x11,0x06,0x03,0x55,0x04,0x07,0x0C,0x0A,0x52,0x33,0x44,0x4E,0x45,0x54,0x57,0x4F,0x52,0x4B,0x31,0x13,0x30,0x11,0x06,0x03,0x55,0x04,0x0A,0x0C,0x0A,0x52,0x33,0x44,0x4E,0x45,0x54,0x57,0x4F,0x52,0x4B,0x31,0x13,0x30,0x11,0x06,0x03,0x55,0x04,0x0B,0x0C,0x0A,0x52,0x33,0x44,0x4E,0x45,0x54,0x57,0x4F,0x52,0x4B,0x31,0x13,0x30,0x11,0x06,0x03,0x55,0x04,0x03,0x0C,0x0A,0x52,0x33,0x44,0x4E,0x45,0x54,0x57,0x4F,0x52,0x4B,0x31,0x22,0x30,0x20,0x06,0x09,0x2A,0x86,0x48,0x86,0xF7,0x0D,0x01,0x09,0x01,0x16,0x13,0x61,0x6E,0x64,0x72,0x6F,0x69,0x64,0x40,0x61,0x6E,0x64,0x72,0x6F,0x69,0x64,0x2E,0x63,0x6F,0x6D,0x30,0x20,0x17,0x0D,0x32,0x34,0x30,0x39,0x31,0x34,0x30,0x33,0x30,0x36,0x34,0x30,0x5A,0x18,0x0F,0x32,0x30,0x35,0x32,0x30,0x31,0x33,0x30,0x30,0x33,0x30,0x36,0x34,0x30,0x5A,0x30,0x81,0x9A,0x31,0x0B,0x30,0x09,0x06,0x03,0x55,0x04,0x06,0x13,0x02,0x55,0x53,0x31,0x13,0x30,0x11,0x06,0x03,0x55,0x04,0x08,0x0C,0x0A,0x52,0x33,0x44,0x4E,0x45,0x54,0x57,0x4F,0x52,0x4B,0x31,0x13,0x30,0x11,0x06,0x03,0x55,0x04,0x07,0x0C,0x0A,0x52,0x33,0x44,0x4E,0x45,0x54,0x57,0x4F,0x52,0x4B,0x31,0x13,0x30,0x11,0x06,0x03,0x55,0x04,0x0A,0x0C,0x0A,0x52,0x33,0x44,0x4E,0x45,0x54,0x57,0x4F,0x52,0x4B,0x31,0x13,0x30,0x11,0x06,0x03,0x55,0x04,0x0B,0x0C,0x0A,0x52,0x33,0x44,0x4E,0x45,0x54,0x57,0x4F,0x52,0x4B,0x31,0x13,0x30,0x11,0x06,0x03,0x55,0x04,0x03,0x0C,0x0A,0x52,0x33,0x44,0x4E,0x45,0x54,0x57,0x4F,0x52,0x4B,0x31,0x22,0x30,0x20,0x06,0x09,0x2A,0x86,0x48,0x86,0xF7,0x0D,0x01,0x09,0x01,0x16,0x13,0x61,0x6E,0x64,0x72,0x6F,0x69,0x64,0x40,0x61,0x6E,0x64,0x72,0x6F,0x69,0x64,0x2E,0x63,0x6F,0x6D,0x30,0x81,0x9F,0x30,0x0D,0x06,0x09,0x2A,0x86,0x48,0x86,0xF7,0x0D,0x01,0x01,0x01,0x05,0x00,0x03,0x81,0x8D,0x00,0x30,0x81,0x89,0x02,0x81,0x81,0x00,0xE6,0x6B,0xD0,0x4C,0x79,0x3C,0x50,0x23,0x71,0x36,0x1C,0x29,0xCE,0x53,0x6A,0x8D,0x75,0x62,0x86,0xF5,0x8F,0x05,0x3B,0xBF,0xB8,0x5E,0x69,0xD7,0x13,0x09,0x81,0x04,0x7B,0x9D,0x2C,0x5A,0x73,0x50,0xF5,0xAE,0x1F,0xFD,0xDA,0x85,0xDD,0x51,0x57,0x1C,0xE1,0xFE,0xE3,0x40,0xCE,0xF3,0xCB,0xF0,0x01,0xB4,0x35,0x65,0x6B,0x86,0x4D,0x26,0x99,0x60,0x41,0x17,0xC8,0x4F,0xDF,0x44,0x6F,0xD1,0x69,0x90,0x16,0x1B,0x91,0x4D,0xBB,0x24,0xD1,0xE7,0x5D,0xC9,0x56,0x62,0x71,0x63,0x0A,0x5F,0xD3,0xE6,0xE3,0xB2,0xF3,0x50,0x09,0x76,0xEE,0x9A,0xFE,0xBA,0x8C,0x26,0xC5,0x08,0x71,0x14,0x54,0xE9,0x43,0xBC,0x0C,0x1C,0x9A,0x9E,0xD8,0x85,0xA8,0x0C,0x00,0x37,0x0C,0x61,0x1F,0xF7,0x02,0x03,0x01,0x00,0x01,0x30,0x0D,0x06,0x09,0x2A,0x86,0x48,0x86,0xF7,0x0D,0x01,0x01,0x0B,0x05,0x00,0x03,0x81,0x81,0x00,0x32,0x4D,0xD5,0xB2,0xD5,0xA1,0x56,0x9D,0x9B,0x65,0x0F,0xA8,0x5F,0xB3,0xCB,0x41,0xF1,0x4F,0xDC,0x74,0x15,0xD0,0x69,0x07,0xEC,0x52,0xF4,0x60,0x73,0x8A,0xD7,0xA1,0x8C,0x50,0xCB,0x51,0xF0,0xDF,0x8B,0x03,0xE5,0x2F,0xBE,0x38,0x3E,0x28,0x92,0x2E,0x50,0x5D,0xAE,0x53,0xD8,0xA5,0x84,0x80,0x6C,0xCE,0x56,0xD8,0xF7,0x04,0x4A,0xC9,0x75,0x4D,0x90,0x36,0xAA,0x63,0xC1,0x31,0x7E,0xC2,0xE6,0x9D,0xBC,0x70,0x4E,0x2F,0x6F,0x81,0x95,0x7A,0xFD,0x18,0x3A,0x3F,0xAF,0x2B,0xA3,0xD9,0x69,0x7C,0x84,0x7A,0x81,0x06,0xE2,0xFD,0xAD,0x6B,0x8D,0x1D,0x93,0xE8,0x96,0x22,0x35,0xFC,0x57,0x78,0x84,0xC5,0x10,0x66,0xA9,0xF8,0x18,0x29,0x4E,0x66,0xEA,0x02,0x39,0x6E,0x6D,0x98}};
//Jni stuff from MrDarkRX https://github.com/MrDarkRXx/DarkMod-Floating
void setDialog(jobject ctx, JNIEnv *env, const char *title, const char *msg){
    jclass Alert = env->FindClass(OBFUSCATE("android/app/AlertDialog$Builder"));
    jmethodID AlertCons = env->GetMethodID(Alert, OBFUSCATE("<init>"), OBFUSCATE("(Landroid/content/Context;)V"));

    jobject MainAlert = env->NewObject(Alert, AlertCons, ctx);

    jmethodID setTitle = env->GetMethodID(Alert, OBFUSCATE("setTitle"), OBFUSCATE("(Ljava/lang/CharSequence;)Landroid/app/AlertDialog$Builder;"));
    env->CallObjectMethod(MainAlert, setTitle, env->NewStringUTF(title));

    jmethodID setMsg = env->GetMethodID(Alert, OBFUSCATE("setMessage"), OBFUSCATE("(Ljava/lang/CharSequence;)Landroid/app/AlertDialog$Builder;"));
    env->CallObjectMethod(MainAlert, setMsg, env->NewStringUTF(msg));

    jmethodID setCa = env->GetMethodID(Alert, OBFUSCATE("setCancelable"), OBFUSCATE("(Z)Landroid/app/AlertDialog$Builder;"));
    env->CallObjectMethod(MainAlert, setCa, false);

    jmethodID setPB = env->GetMethodID(Alert, OBFUSCATE("setPositiveButton"), OBFUSCATE("(Ljava/lang/CharSequence;Landroid/content/DialogInterface$OnClickListener;)Landroid/app/AlertDialog$Builder;"));
    env->CallObjectMethod(MainAlert, setPB, env->NewStringUTF("Ok"), static_cast<jobject>(NULL));

    jmethodID create = env->GetMethodID(Alert, OBFUSCATE("create"), OBFUSCATE("()Landroid/app/AlertDialog;"));
    jobject creaetob = env->CallObjectMethod(MainAlert, create);

    jclass AlertN = env->FindClass(OBFUSCATE("android/app/AlertDialog"));

    jmethodID show = env->GetMethodID(AlertN, OBFUSCATE("show"), OBFUSCATE("()V"));
    env->CallVoidMethod(creaetob, show);
}

void Toast(JNIEnv *env, jobject thiz, const char *text, int length) {
    jstring jstr = env->NewStringUTF(text);
    jclass toast = env->FindClass(OBFUSCATE("android/widget/Toast"));
    jmethodID methodMakeText =env->GetStaticMethodID(toast,OBFUSCATE("makeText"),OBFUSCATE("(Landroid/content/Context;Ljava/lang/CharSequence;I)Landroid/widget/Toast;"));
    jobject toastobj = env->CallStaticObjectMethod(toast, methodMakeText,thiz, jstr, length);
    jmethodID methodShow = env->GetMethodID(toast, OBFUSCATE("show"), OBFUSCATE("()V"));
    env->CallVoidMethod(toastobj, methodShow);
}

void startActivityPermisson(JNIEnv *env, jobject ctx){
    jclass native_context = env->GetObjectClass(ctx);
    jmethodID startActivity = env->GetMethodID(native_context, OBFUSCATE("startActivity"),OBFUSCATE("(Landroid/content/Intent;)V"));

    jmethodID pack = env->GetMethodID(native_context, OBFUSCATE("getPackageName"),OBFUSCATE("()Ljava/lang/String;"));
    jstring packageName = static_cast<jstring>(env->CallObjectMethod(ctx, pack));

    const char *pkg = env->GetStringUTFChars(packageName, 0);

    std::stringstream pkgg;
    pkgg << OBFUSCATE("package:");
    pkgg << pkg;
    std::string pakg = pkgg.str();

    jclass Uri = env->FindClass(OBFUSCATE("android/net/Uri"));
    jmethodID Parce = env->GetStaticMethodID(Uri, OBFUSCATE("parse"), OBFUSCATE("(Ljava/lang/String;)Landroid/net/Uri;"));
    jobject UriMethod = env->CallStaticObjectMethod(Uri, Parce, env->NewStringUTF(pakg.c_str()));

    jclass intentclass = env->FindClass(OBFUSCATE("android/content/Intent"));
    jmethodID newIntent = env->GetMethodID(intentclass, OBFUSCATE("<init>"), OBFUSCATE("(Ljava/lang/String;Landroid/net/Uri;)V"));
    jobject intent = env->NewObject(intentclass,newIntent,env->NewStringUTF(OBFUSCATE("android.settings.action.MANAGE_OVERLAY_PERMISSION")), UriMethod);

    env->CallVoidMethod(ctx, startActivity, intent);
}

void startService(JNIEnv *env, jobject ctx){
    jclass native_context = env->GetObjectClass(ctx);
    jclass intentClass = env->FindClass(OBFUSCATE("android/content/Intent"));
    jclass actionString = env->FindClass(OBFUSCATE("com/android/support/Launcher"));
    jmethodID newIntent = env->GetMethodID(intentClass, OBFUSCATE("<init>"), OBFUSCATE("(Landroid/content/Context;Ljava/lang/Class;)V"));
    jobject intent = env->NewObject(intentClass,newIntent,ctx,actionString);
    jmethodID startActivityMethodId = env->GetMethodID(native_context, OBFUSCATE("startService"), OBFUSCATE("(Landroid/content/Intent;)Landroid/content/ComponentName;"));
    env->CallObjectMethod(ctx, startActivityMethodId, intent);
}

void *exit_thread(void *) {
    sleep(5);
    exit(0);
}

//Needed jclass parameter because this is a static java method
void CheckOverlayPermission(JNIEnv *env, jclass thiz, jobject ctx){
    //If overlay permission option is greyed out, make sure to add android.permission.SYSTEM_ALERT_WINDOW in manifest

    LOGI(OBFUSCATE("Check overlay permission"));

    int sdkVer = api_level();
    if (sdkVer >= 23){ //Android 6.0
        jclass Settings = env->FindClass(OBFUSCATE("android/provider/Settings"));
        jmethodID canDraw =env->GetStaticMethodID(Settings, OBFUSCATE("canDrawOverlays"), OBFUSCATE("(Landroid/content/Context;)Z"));
        if (!env->CallStaticBooleanMethod(Settings, canDraw, ctx)){
            Toast(env,ctx,OBFUSCATE("Overlay permission is required in order to show mod menu."),1);
            Toast(env,ctx,OBFUSCATE("Overlay permission is required in order to show mod menu."),1);
            startActivityPermisson(env, ctx);

            pthread_t ptid;
            pthread_create(&ptid, NULL, exit_thread, NULL);
            return;
        }
    }


    LOGI(OBFUSCATE("Start service"));

    //StartMod Normal
    startService(env, ctx);
}

bool ca8f2802(JNIEnv *env, jobject ctx) {
    jclass context_class = env->GetObjectClass(ctx);
    jmethodID getPackageManager = env->GetMethodID(context_class, OBFUSCATE("getPackageManager"), OBFUSCATE("()Landroid/content/pm/PackageManager;"));
    jobject package_manager = env->CallObjectMethod(ctx, getPackageManager);

    jmethodID getPackageName = env->GetMethodID(context_class, OBFUSCATE("getPackageName"), OBFUSCATE("()Ljava/lang/String;"));
    jstring package_name = static_cast<jstring>(env->CallObjectMethod(ctx, getPackageName));

    jclass package_manager_class = env->GetObjectClass(package_manager);
    jmethodID getPackageInfo = env->GetMethodID(package_manager_class, OBFUSCATE("getPackageInfo"), OBFUSCATE("(Ljava/lang/String;I)Landroid/content/pm/PackageInfo;"));
    jobject package_info = env->CallObjectMethod(package_manager, getPackageInfo, package_name, 0x40); // GET_SIGNATURES = 0x40

    jclass package_info_class = env->GetObjectClass(package_info);
    jfieldID signatures_field = env->GetFieldID(package_info_class, OBFUSCATE("signatures"), OBFUSCATE("[Landroid/content/pm/Signature;"));
    jobjectArray signatures = static_cast<jobjectArray>(env->GetObjectField(package_info, signatures_field));

    for (int i = 0; i < env->GetArrayLength(signatures); i++) {
        jobject signature = env->GetObjectArrayElement(signatures, i);
        jclass signature_class = env->GetObjectClass(signature);
        jmethodID toByteArray = env->GetMethodID(signature_class, OBFUSCATE("toByteArray"), OBFUSCATE("()[B"));
        jbyteArray signature_bytes = static_cast<jbyteArray>(env->CallObjectMethod(signature, toByteArray));

        jbyte *bytes = env->GetByteArrayElements(signature_bytes, nullptr);
        std::vector<uint8_t> signature_vector(bytes, bytes + env->GetArrayLength(signature_bytes));
        env->ReleaseByteArrayElements(signature_bytes, bytes, JNI_ABORT);

        if (std::find(x400d_b1a3.begin(), x400d_b1a3.end(), signature_vector) != x400d_b1a3.end()) {
            return true;
        }
    }

    return false;
}

void Init(JNIEnv *env, jobject thiz, jobject ctx, jobject title, jobject subtitle){
    //Set sub title
    setText(env, title, OBFUSCATE("<b>R3D Network ID</b>"));

    //Set sub title
    setText(env, subtitle, OBFUSCATE("<b>- Modded by rrosetta | Platinmods.com -</b>"));

    //Dialog Example
    //setDialog(ctx,env,OBFUSCATE("Title"),OBFUSCATE("Message Example"));

    //Toast Example
    Toast(env,ctx,OBFUSCATE("R3D Network ID"),ToastLength::LENGTH_LONG);


/*    if (!ca8f2802(env, ctx)) {
        Toast(env, ctx, OBFUSCATE("Invalid signature :D"), ToastLength::LENGTH_LONG);
        pthread_t ptid;
        pthread_create(&ptid, NULL, exit_thread, NULL);
    }*/

    initValid = true;

}
